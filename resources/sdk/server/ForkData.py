# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.13.1
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

import os
import json

# # Fork Data

dir_path = '/Users/skl/Downloads'
fork_dirs = [d for d in os.listdir(dir_path) if os.path.isdir(os.path.join(dir_path, d)) and d.startswith('fork')]
newest_dir = max(fork_dirs, key=lambda d: os.path.getmtime(os.path.join(dir_path, d)))
fork = newest_dir[5:].split(" ")[0]
p = os.path.join(dir_path, newest_dir)
print(p)


def rj(path, fn, field=None):
    
    ffn = os.path.join(path, fn)
    with open(ffn, 'r') as f:
        data = json.load(f)
    if field is None:
        return data
    return data.get(field)



cc = rj(p, "CarbonController.json", "address")
cc

v = rj(p, "Voucher.json", "address")
v

rpc = f"https://rpc.tenderly.co/fork/{fork}"
rpc

print(f"""
const carbonControllerAddress="{cc}"
const voucherAddress="{v}"
const rpcUrl="{rpc}"


""")


print(f"""
////////////////////////////////
// auto-generated by ForkData.py
const sdkConfig = {{
    rpcUrl: "{rpc}",
    contractAddresses: {{
      carbonControllerAddress: "{cc}",
      voucherAddress: "{v}",
    }},
  }};
const sdk = new Sdk(sdkConfig);
// end auto-generated
////////////////////////////////
""")


